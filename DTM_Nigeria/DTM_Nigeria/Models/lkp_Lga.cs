//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace DTM_Nigeria.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(iom_presence_wards))]
    [KnownType(typeof(iom_ward_presence_per_location))]
    [KnownType(typeof(lkp_State))]
    [KnownType(typeof(lkp_Ward))]
    [KnownType(typeof(iom_profile))]
    [KnownType(typeof(iom_group_assessment_1))]
    [KnownType(typeof(iom_group_assessment_2))]
    public partial class lkp_Lga
    {
        #region Primitive Properties
        [DataMember]
        public virtual int id
        {
            get;
            set;
        }
        [DataMember]
        public virtual string state_code
        {
            get { return _state_code; }
            set
            {
                if (_state_code != value)
                {
                    if (lkp_State != null && lkp_State.state_code != value)
                    {
                        lkp_State = null;
                    }
                    _state_code = value;
                }
            }
        }
        private string _state_code;
        [DataMember]
        public virtual string lga_name
        {
            get;
            set;
        }
        [DataMember]
        public virtual string lga_code
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
        
    
        [DataMember]
        public virtual ICollection<iom_presence_wards> iom_presence_wards
        {
            get
            {
                if (_iom_presence_wards == null)
                {
                    var newCollection = new FixupCollection<iom_presence_wards>();
                    newCollection.CollectionChanged += Fixupiom_presence_wards;
                    _iom_presence_wards = newCollection;
                }
                return _iom_presence_wards;
            }
            set
            {
                if (!ReferenceEquals(_iom_presence_wards, value))
                {
                    var previousValue = _iom_presence_wards as FixupCollection<iom_presence_wards>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupiom_presence_wards;
                    }
                    _iom_presence_wards = value;
                    var newValue = value as FixupCollection<iom_presence_wards>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupiom_presence_wards;
                    }
                }
            }
        }
        private ICollection<iom_presence_wards> _iom_presence_wards;
        
    
        [DataMember]
        public virtual ICollection<iom_ward_presence_per_location> iom_ward_presence_per_location
        {
            get
            {
                if (_iom_ward_presence_per_location == null)
                {
                    var newCollection = new FixupCollection<iom_ward_presence_per_location>();
                    newCollection.CollectionChanged += Fixupiom_ward_presence_per_location;
                    _iom_ward_presence_per_location = newCollection;
                }
                return _iom_ward_presence_per_location;
            }
            set
            {
                if (!ReferenceEquals(_iom_ward_presence_per_location, value))
                {
                    var previousValue = _iom_ward_presence_per_location as FixupCollection<iom_ward_presence_per_location>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupiom_ward_presence_per_location;
                    }
                    _iom_ward_presence_per_location = value;
                    var newValue = value as FixupCollection<iom_ward_presence_per_location>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupiom_ward_presence_per_location;
                    }
                }
            }
        }
        private ICollection<iom_ward_presence_per_location> _iom_ward_presence_per_location;
        
    
        [DataMember]
        public virtual lkp_State lkp_State
        {
            get { return _lkp_State; }
            set
            {
                if (!ReferenceEquals(_lkp_State, value))
                {
                    var previousValue = _lkp_State;
                    _lkp_State = value;
                    Fixuplkp_State(previousValue);
                }
            }
        }
        private lkp_State _lkp_State;
        
    
        [DataMember]
        public virtual ICollection<lkp_Ward> lkp_Ward
        {
            get
            {
                if (_lkp_Ward == null)
                {
                    var newCollection = new FixupCollection<lkp_Ward>();
                    newCollection.CollectionChanged += Fixuplkp_Ward;
                    _lkp_Ward = newCollection;
                }
                return _lkp_Ward;
            }
            set
            {
                if (!ReferenceEquals(_lkp_Ward, value))
                {
                    var previousValue = _lkp_Ward as FixupCollection<lkp_Ward>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuplkp_Ward;
                    }
                    _lkp_Ward = value;
                    var newValue = value as FixupCollection<lkp_Ward>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuplkp_Ward;
                    }
                }
            }
        }
        private ICollection<lkp_Ward> _lkp_Ward;
        
    
        [DataMember]
        public virtual ICollection<iom_profile> iom_profile
        {
            get
            {
                if (_iom_profile == null)
                {
                    var newCollection = new FixupCollection<iom_profile>();
                    newCollection.CollectionChanged += Fixupiom_profile;
                    _iom_profile = newCollection;
                }
                return _iom_profile;
            }
            set
            {
                if (!ReferenceEquals(_iom_profile, value))
                {
                    var previousValue = _iom_profile as FixupCollection<iom_profile>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupiom_profile;
                    }
                    _iom_profile = value;
                    var newValue = value as FixupCollection<iom_profile>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupiom_profile;
                    }
                }
            }
        }
        private ICollection<iom_profile> _iom_profile;
        
    
        [DataMember]
        public virtual ICollection<iom_group_assessment_1> iom_group_assessment_1
        {
            get
            {
                if (_iom_group_assessment_1 == null)
                {
                    var newCollection = new FixupCollection<iom_group_assessment_1>();
                    newCollection.CollectionChanged += Fixupiom_group_assessment_1;
                    _iom_group_assessment_1 = newCollection;
                }
                return _iom_group_assessment_1;
            }
            set
            {
                if (!ReferenceEquals(_iom_group_assessment_1, value))
                {
                    var previousValue = _iom_group_assessment_1 as FixupCollection<iom_group_assessment_1>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupiom_group_assessment_1;
                    }
                    _iom_group_assessment_1 = value;
                    var newValue = value as FixupCollection<iom_group_assessment_1>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupiom_group_assessment_1;
                    }
                }
            }
        }
        private ICollection<iom_group_assessment_1> _iom_group_assessment_1;
        
    
        [DataMember]
        public virtual ICollection<iom_group_assessment_2> iom_group_assessment_2
        {
            get
            {
                if (_iom_group_assessment_2 == null)
                {
                    var newCollection = new FixupCollection<iom_group_assessment_2>();
                    newCollection.CollectionChanged += Fixupiom_group_assessment_2;
                    _iom_group_assessment_2 = newCollection;
                }
                return _iom_group_assessment_2;
            }
            set
            {
                if (!ReferenceEquals(_iom_group_assessment_2, value))
                {
                    var previousValue = _iom_group_assessment_2 as FixupCollection<iom_group_assessment_2>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupiom_group_assessment_2;
                    }
                    _iom_group_assessment_2 = value;
                    var newValue = value as FixupCollection<iom_group_assessment_2>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupiom_group_assessment_2;
                    }
                }
            }
        }
        private ICollection<iom_group_assessment_2> _iom_group_assessment_2;

        #endregion

        #region Association Fixup
    
        private void Fixuplkp_State(lkp_State previousValue)
        {
            if (previousValue != null && previousValue.lkp_Lga.Contains(this))
            {
                previousValue.lkp_Lga.Remove(this);
            }
    
            if (lkp_State != null)
            {
                if (!lkp_State.lkp_Lga.Contains(this))
                {
                    lkp_State.lkp_Lga.Add(this);
                }
                if (state_code != lkp_State.state_code)
                {
                    state_code = lkp_State.state_code;
                }
            }
        }
    
        private void Fixupiom_presence_wards(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (iom_presence_wards item in e.NewItems)
                {
                    item.lkp_Lga = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (iom_presence_wards item in e.OldItems)
                {
                    if (ReferenceEquals(item.lkp_Lga, this))
                    {
                        item.lkp_Lga = null;
                    }
                }
            }
        }
    
        private void Fixupiom_ward_presence_per_location(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (iom_ward_presence_per_location item in e.NewItems)
                {
                    item.lkp_Lga = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (iom_ward_presence_per_location item in e.OldItems)
                {
                    if (ReferenceEquals(item.lkp_Lga, this))
                    {
                        item.lkp_Lga = null;
                    }
                }
            }
        }
    
        private void Fixuplkp_Ward(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (lkp_Ward item in e.NewItems)
                {
                    item.lkp_Lga = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (lkp_Ward item in e.OldItems)
                {
                    if (ReferenceEquals(item.lkp_Lga, this))
                    {
                        item.lkp_Lga = null;
                    }
                }
            }
        }
    
        private void Fixupiom_profile(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (iom_profile item in e.NewItems)
                {
                    item.lkp_Lga = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (iom_profile item in e.OldItems)
                {
                    if (ReferenceEquals(item.lkp_Lga, this))
                    {
                        item.lkp_Lga = null;
                    }
                }
            }
        }
    
        private void Fixupiom_group_assessment_1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (iom_group_assessment_1 item in e.NewItems)
                {
                    item.lkp_Lga = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (iom_group_assessment_1 item in e.OldItems)
                {
                    if (ReferenceEquals(item.lkp_Lga, this))
                    {
                        item.lkp_Lga = null;
                    }
                }
            }
        }
    
        private void Fixupiom_group_assessment_2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (iom_group_assessment_2 item in e.NewItems)
                {
                    item.lkp_Lga = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (iom_group_assessment_2 item in e.OldItems)
                {
                    if (ReferenceEquals(item.lkp_Lga, this))
                    {
                        item.lkp_Lga = null;
                    }
                }
            }
        }

        #endregion

    }
}
